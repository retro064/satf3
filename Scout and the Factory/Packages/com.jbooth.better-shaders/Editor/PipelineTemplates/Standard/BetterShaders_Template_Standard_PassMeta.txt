
	   // ---- meta information extraction pass:
	   Pass
      {
		   Name "Meta"
		   Tags { "LightMode" = "Meta" }
		   Cull Off

         %PASSMETA%

         CGPROGRAM

         %PRAGMAS%

         // compile directives
         #pragma target %SHADERTARGET%
         #pragma multi_compile_instancing
         #pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
         #pragma shader_feature EDITOR_VISUALIZATION

         #include "HLSLSupport.cginc"
         #define UNITY_INSTANCED_LOD_FADE
         #define UNITY_INSTANCED_SH
         #define UNITY_INSTANCED_LIGHTMAPSTS
         #include "UnityShaderVariables.cginc"
         #include "UnityShaderUtilities.cginc"

         #include "UnityCG.cginc"
         #include "Lighting.cginc"
         #include "UnityPBSLighting.cginc"
         #include "UnityMetaPass.cginc"

         #define _PASSMETA 1

         %DEFINES%

         

         // data across stages, stripped like the above.
         struct VertexToPixel
         {
            UNITY_POSITION(pos);
            float3 worldPos : TEXCOORD0;
            float3 worldNormal : TEXCOORD1;
            float4 worldTangent : TEXCOORD2;
            %V2FUV0% float4 texcoord0 : TEXCOORD3%TEXCOORD0MOD%;
            %V2FUV1% float4 texcoord1 : TEXCOORD4%TEXCOORD1MOD%;
            %V2FUV2% float4 texcoord2 : TEXCOORD5%TEXCOORD2MOD%;

            %TEXCOORD3REQUIRE% #if %TEXCOORD3REQUIREKEY%
            %V2FUV3% float4 texcoord3 : TEXCOORD6%TEXCOORD3MOD%;
            %TEXCOORD3REQUIRE% #endif

            %SCREENPOSREQUIRE% #if %SCREENPOSREQUIREKEY%
            %SCREENPOS% float4 screenPos : TEXCOORD7;
            %SCREENPOSREQUIRE% #endif

            #ifdef EDITOR_VISUALIZATION
              float2 vizUV : TEXCOORD8;
              float4 lightCoord : TEXCOORD9;
            #endif

            
            %VERTEXCOLORREQUIRE% #if %VERTEXCOLORREQUIREKEY%
            %V2FVERTEXCOLOR% float4 vertexColor : COLOR%VERTEXCOLORMOD%;
            %VERTEXCOLORREQUIRE% #endif

            %EXTRAV2F0REQUIRE% #if %EXTRAV2F0REQUIREKEY%
            %EXTRAV2F0% float4 extraV2F0 : TEXCOORD10%EXTRAV2F0MOD%;
            %EXTRAV2F0REQUIRE% #endif

            %EXTRAV2F1REQUIRE% #if %EXTRAV2F1REQUIREKEY%
            %EXTRAV2F1% float4 extraV2F1 : TEXCOORD11%EXTRAV2F1MOD%;
            %EXTRAV2F1REQUIRE% #endif

            %EXTRAV2F2REQUIRE% #if %EXTRAV2F2REQUIREKEY%
            %EXTRAV2F2% float4 extraV2F2 : TEXCOORD12%EXTRAV2F2MOD%;
            %EXTRAV2F2REQUIRE% #endif

            %EXTRAV2F3REQUIRE% #if %EXTRAV2F3REQUIREKEY%
            %EXTRAV2F3% float4 extraV2F3 : TEXCOORD13%EXTRAV2F3MOD%;
            %EXTRAV2F3REQUIRE% #endif

            %EXTRAV2F4REQUIRE% #if %EXTRAV2F4REQUIREKEY%
            %EXTRAV2F4% float4 extraV2F4 : TEXCOORD14%EXTRAV2F4MOD%;
            %EXTRAV2F4REQUIRE% #endif

            %EXTRAV2F5REQUIRE% #if %EXTRAV2F5REQUIREKEY%
            %EXTRAV2F5% float4 extraV2F5 : TEXCOORD15%EXTRAV2F5MOD%;
            %EXTRAV2F5REQUIRE% #endif

            %EXTRAV2F6REQUIRE% #if %EXTRAV2F6REQUIREKEY%
            %EXTRAV2F6% float4 extraV2F6 : TEXCOORD16%EXTRAV2F6MOD%;
            %EXTRAV2F6REQUIRE% #endif

            %EXTRAV2F7REQUIRE% #if %EXTRAV2F7REQUIREKEY%
            %EXTRAV2F7% float4 extraV2F7 : TEXCOORD17%EXTRAV2F7MOD%;
            %EXTRAV2F7REQUIRE% #endif


            UNITY_VERTEX_INPUT_INSTANCE_ID
            UNITY_VERTEX_OUTPUT_STEREO
         };

         %TEMPLATE_SHARED%
            
         %CBUFFER%

         %CUSTOMCBUFFER%

         %CUSTOMINSTANCEPROPS%

         %CODE%

         %SHADERDESC%

         // vertex shader
         VertexToPixel Vert (VertexData v)
         {
            UNITY_SETUP_INSTANCE_ID(v);
            VertexToPixel o;
            UNITY_INITIALIZE_OUTPUT(VertexToPixel,o);
            UNITY_TRANSFER_INSTANCE_ID(v,o);
            UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

#if !_TESSELLATION_ON
           ChainModifyVertex(v, o, _Time);
#endif


            o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);
            #ifdef EDITOR_VISUALIZATION
               o.vizUV = 0;
               o.lightCoord = 0;
               if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
                  o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord0.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
               else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
               {
                  o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
                  o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
               }
            #endif


            %V2FUV0% o.texcoord0 = v.texcoord0;
            %V2FUV1% o.texcoord1 = v.texcoord1;
            %V2FUV2% o.texcoord2 = v.texcoord2;

            %TEXCOORD3REQUIRE% #if %TEXCOORD3REQUIREKEY%
            %V2FUV3% o.texcoord3 = v.texcoord3;
            %TEXCOORD3REQUIRE% #endif

            %VERTEXCOLORREQUIRE% #if %VERTEXCOLORREQUIREKEY%
            %V2FVERTEXCOLOR% o.vertexColor = v.vertexColor;
            %VERTEXCOLORREQUIRE% #endif

            %SCREENPOSREQUIRE% #if %SCREENPOSREQUIREKEY%
            %SCREENPOS% o.screenPos = ComputeScreenPos(o.pos);
            %SCREENPOSREQUIRE% #endif

            o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
            o.worldNormal = UnityObjectToWorldNormal(v.normal);
            o.worldTangent.xyz = UnityObjectToWorldDir(v.tangent.xyz);
            fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
            o.worldTangent.w = tangentSign;

            return o;
         }

         %TESSELLATION%

         // fragment shader
         fixed4 Frag (VertexToPixel IN
         #if NEED_FACING
            , bool facing : SV_IsFrontFace
         #endif
         ) : SV_Target
         {
            UNITY_SETUP_INSTANCE_ID(IN);

            #ifdef FOG_COMBINED_WITH_TSPACE
               UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
            #elif defined FOG_COMBINED_WITH_WORLD_POS
               UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
            #else
               UNITY_EXTRACT_FOG(IN);
            #endif

            ShaderData d = CreateShaderData(IN
               #if NEED_FACING
                 , facing
              #endif
            );

            Surface l = (Surface)0;

            l.Albedo = half3(0.5, 0.5, 0.5);
            l.Normal = float3(0,0,1);
            l.Occlusion = 1;
            l.Alpha = 1;

            
            ChainSurfaceFunction(l, d);

            UnityMetaInput metaIN;
            UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
            metaIN.Albedo = l.Albedo;
            metaIN.Emission = l.Emission;
          
            #if _USESPECULAR
               metaIN.SpecularColor = l.Specular;
            #endif

            #ifdef EDITOR_VISUALIZATION
              metaIN.VizUV = IN.vizUV;
              metaIN.LightCoord = IN.lightCoord;
            #endif
            return UnityMetaFragment(metaIN);
         }
         ENDCG

      }
