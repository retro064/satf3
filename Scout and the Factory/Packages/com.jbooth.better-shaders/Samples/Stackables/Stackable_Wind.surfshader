// Wind Particulate effect

// Put any properties you have between the begin/end property blocks
BEGIN_PROPERTIES
   [BetterHeader(Wind Particulate)]
   [Enum(World, 0, UV, 1)]_WindParticularSpace("Wind UV Source", Float) = 0
   [NoScaleOffset]_WindParticulate("Wind Texture", 2D) = "black" {}
   _WindParticulateStrength("Strength", Range(0, 3)) = 1
   _WindParticulateUVScale("UV Scale", Vector) = (1, 0.25, 0, 0)
   _WindParticulateSpeed("Speed", Float) = 1
   _WindParticulatePower("Contrast", Float) = 1
   _WindParticulateRotation("Rotation", Float) = 0
   _WindParticulateColor("Color, strength", Color) = (1, 1, 1, 1)
   _WindParticulateWorldHeightMask("Wind Height Mask", Vector) = (-99999, -99999, 99999, 99999)
   _WindParticulateTextureHeight("Wind Texture Height", Range(0,1)) = 1
   _WindParticulateAngleMask("Wind Angle Mask", Vector) = (-1, -1, 1, 1)
   _WindParticulateOcclusionStrength("Wind Occlusion Strength", Range(0,1)) = 1
   _WindParticulateEmissive("Wind Emissive", Color) = (0,0,0,0)
   _WindParticulateUpMask("Up Mask", Vector) = (-1, -1, 1, 1)
END_PROPERTIES

// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
   half      _WindParticularSpace;
   half     _WindParticulateRotation;
   half      _WindParticulateSpeed;
   half2     _WindParticulateUVScale;
   half      _WindParticulatePower;
   half4    _WindParticulateColor;
   half4    _WindParticulateWorldHeightMask;
   half4    _WindParticulateAngleMask;
   half      _WindParticulateOcclusionStrength;
   half      _WindParticulateStrength;
   half4    _WindParticulateUpMask;
   half4    _WindParticulateEmissive;
   half     _WindParticulateTextureHeight;
END_CBUFFER

BEGIN_SUBSHADERS
   "StackableLibrary.surfshader"
END_SUBSHADERS

// All code goes here
BEGIN_CODE

   TEXTURE2D(_WindParticulate);
   SAMPLER(sampler_WindParticulate);


   void SurfaceFunction(inout Surface o, ShaderData d)
   {
      // maybe take this out of the meta pass instead? Everything else is likely fine.
      #if defined(UNITY_PASS_FORWARDBASE) || defined(UNITY_PASS_DEFERRED) || (defined(_URP) || _HDRP)
   
         float3 upVector = float3(0,0,1);

         half upDot = max(0.0, dot(d.worldSpaceNormal, float3(0, 1, 0)));

         float2 uv = d.worldSpacePosition.xz;
         if (_WindParticularSpace > 0.5)
            uv = d.texcoord0.xy;
         float windRotation = _WindParticulateRotation;
         float windStrength = _WindParticulateStrength;

         float2 wuv = RotateUV(uv, windRotation);

         half windBlend = 1.0;

         float windWorldMask = FilterRange(_WindParticulateWorldHeightMask, d.worldSpacePosition.y);
         windWorldMask *= FilterRange(_WindParticulateAngleMask, upDot);
         #if _WINDPARTICULATEUPFILTER
            windWorldMask *= FilterWindParticulateSlope(_WindParticulateUpMask, d.worldSpaceNormal, windRotation);
         #endif

         // compute mask
         wuv *= float2(_WindParticulateUVScale.x, 1) * _WindParticulateUVScale.y;
         float speed = _Time.x * _WindParticulateSpeed;
         half w1 = SAMPLE_TEXTURE2D(_WindParticulate, sampler_WindParticulate, wuv * 3 + speed * float2(1,0)).g;
         half w2 = SAMPLE_TEXTURE2D(_WindParticulate, sampler_WindParticulate, wuv + speed * float2(1.1,0)).a;
         half windMask = (w1 * w2);

         windMask *= windStrength * windBlend * windWorldMask;
         windMask *= saturate((_WindParticulateTextureHeight - o.Height) * 10);

         half windInvMask = ProcessWindParticulateMask(windMask, _WindParticulatePower);
    
         o.Albedo = lerp(o.Albedo, _WindParticulateColor.rgb, windMask * _WindParticulateColor.a);
         o.Emission += _WindParticulateColor.rgb * windMask * _WindParticulateColor.a * _WindParticulateEmissive.rgb;
         o.Normal.xy *= windInvMask;
         o.Smoothness *= windInvMask;
         o.Occlusion -= (1.0 - windInvMask) * _WindParticulateOcclusionStrength;
         o.Metallic *= windInvMask;
      #endif

   }

END_CODE

